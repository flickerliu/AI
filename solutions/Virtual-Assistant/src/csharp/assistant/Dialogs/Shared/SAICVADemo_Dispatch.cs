// <auto-generated>
// Code generated by LUISGen ds.json -cs Luis.SAICVADemo_Dispatch -o Dialogs\Shared
// Tool github: https://github.com/microsoft/botbuilder-tools
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
using Newtonsoft.Json;
using System.Collections.Generic;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Builder.AI.Luis;
namespace Luis
{
    public class SAICVADemo_Dispatch: IRecognizerConvert
    {
        public string Text;
        public string AlteredText;
        public enum Intent {
            l_SAICVADemo_Calendar, 
            l_SAICVADemo_Email, 
            l_SAICVADemo_General, 
            l_SAICVADemo_PointOfInterest, 
            l_SAICVADemo_ToDo, 
            l_SAICVADemo_Weather, 
            None, 
            q_FAQ
        };
        public Dictionary<Intent, IntentScore> Intents;

        public class _Entities
        {
            // Simple entities
            public string[] ADDRESS;
            public string[] KEYWORD;
            public string[] ListType;

            // Lists
            public string[][] ShopVerb;

            // Pattern.any
            public string[] ShopContent;
            public string[] TaskContentPattern;

            // Instance
            public class _Instance
            {
                public InstanceData[] ADDRESS;
                public InstanceData[] KEYWORD;
                public InstanceData[] ListType;
                public InstanceData[] ShopVerb;
                public InstanceData[] ShopContent;
                public InstanceData[] TaskContentPattern;
            }
            [JsonProperty("$instance")]
            public _Instance _instance;
        }
        public _Entities Entities;

        [JsonExtensionData(ReadData = true, WriteData = true)]
        public IDictionary<string, object> Properties {get; set; }

        public void Convert(dynamic result)
        {
            var app = JsonConvert.DeserializeObject<SAICVADemo_Dispatch>(JsonConvert.SerializeObject(result));
            Text = app.Text;
            AlteredText = app.AlteredText;
            Intents = app.Intents;
            Entities = app.Entities;
            Properties = app.Properties;
        }

        public (Intent intent, double score) TopIntent()
        {
            Intent maxIntent = Intent.None;
            var max = 0.0;
            foreach (var entry in Intents)
            {
                if (entry.Value.Score > max)
                {
                    maxIntent = entry.Key;
                    max = entry.Value.Score.Value;
                }
            }
            return (maxIntent, max);
        }
    }
}
